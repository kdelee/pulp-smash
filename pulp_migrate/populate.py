# coding=utf-8
"""Tests that populate a pulp server with repos.

These "tests" populate a server using the API so the result of these calls can
be known, which is useful for automated upgrade and migration jobs that
populate a server, then either back up the data to move to a different
filesystem and pulp install or upgrade pulp and check that the data was not
corrupted. Unlike the tests in pulp_smash, these test purposefully leave the
system in a changed state.

To remove content generated by these tests, run the test cases in pulp_migrate.clean.
These tests will only remove content if it is present.
"""
from urllib.parse import urljoin

import unittest

from pulp_smash import api, utils, config
from pulp_smash.constants import (
    REPOSITORY_PATH,
    RPM_SIGNED_FEED_URL,
    PYTHON_PYPI_FEED_URL,
    PUPPET_MODULE_URL_2,
    DOCKER_V1_FEED_URL,
    DOCKER_V2_FEED_URL,
    DOCKER_UPSTREAM_NAME,
    ORPHANS_PATH
)

from pulp_migrate.constants import (
    RPM_REPO,
    PYTHON_REPO,
    PUPPET_REPO,
    DOCKER_V1_REPO,
    DOCKER_V2_REPO,
)

from pulp_migrate.utils import (
    clean_repo,
    gen_rpm_repo,
    gen_rpm_distributor,
    gen_python_repo,
    gen_python_distributor,
    gen_puppet_repo,
    gen_puppet_distributor,
    gen_docker_repo,
    gen_docker_distributor,
)

class BasePopulateTestCase(unittest.TestCase):
    """Base class for all population tests.

       Provides a server config object.
    """

    @classmethod
    def setUpClass(cls):
        """Provide a server config object.

        The following class attributes are created this method:

        ``cfg``
            A :class:`pulp_smash.config.PulpSmashConfig` object.
        """
        cls.cfg = config.get_config()

class PopulateRPMRepo(BasePopulateTestCase):
    """Create an RPM repo that is synced and published."""

    def test_all(self):
        clean_repo(RPM_REPO)
        client = api.Client(self.cfg, api.json_handler)
        distributor = gen_rpm_distributor()
        distributor['auto_publish'] = True
        distributor['distributor_config']['relative_url'] = RPM_REPO
        body = gen_rpm_repo()
        body['distributors'] = [distributor]
        body['importer_config'] = {
            'feed': RPM_SIGNED_FEED_URL,
        }
        body['display_name'] = RPM_REPO
        body['id'] = body['display_name']
        repo = client.post(REPOSITORY_PATH, body)
        utils.sync_repo(self.cfg, repo)


class PopulatePythonRepo(BasePopulateTestCase):
    """Create a Python repo that is synced and published."""

    def test_all(self):
        clean_repo(PYTHON_REPO)
        client = api.Client(self.cfg, api.json_handler)
        distributor = gen_python_distributor()
        distributor['auto_publish'] = True
        distributor['distributor_config']['relative_url'] = PYTHON_REPO
        body = gen_python_repo()
        body['distributors'] = [distributor]
        body['importer_config'] = {
            'feed': PYTHON_PYPI_FEED_URL,
        }
        body['display_name'] = PYTHON_REPO
        body['id'] = body['display_name']
        repo = client.post(REPOSITORY_PATH, body)
        utils.sync_repo(self.cfg, repo)


class PopulateDockerRepo(BasePopulateTestCase):
    """Create Docker V1 and V2 repos that are synced and published."""

    def test_v1(self):
        clean_repo(DOCKER_V1_REPO)
        client = api.Client(self.cfg, api.json_handler)
        distributor = gen_docker_distributor()
        distributor['auto_publish'] = True
        distributor['distributor_config']['relative_url'] = DOCKER_V1_REPO
        body = gen_docker_repo()
        body['distributors'] = [distributor]
        body['importer_config'] = {
            'feed': DOCKER_V1_FEED_URL,
            'upstream_name' : DOCKER_UPSTREAM_NAME,
        }
        body['display_name'] = DOCKER_V1_REPO
        body['id'] = body['display_name']
        repo = client.post(REPOSITORY_PATH, body)
        utils.sync_repo(self.cfg, repo)


    def test_v2(self):
        clean_repo(DOCKER_V2_REPO)
        client = api.Client(self.cfg, api.json_handler)
        distributor = gen_docker_distributor()
        distributor['auto_publish'] = True
        distributor['distributor_config']['relative_url'] = DOCKER_V2_REPO
        body = gen_docker_repo()
        body['distributors'] = [distributor]
        body['importer_config'] = {
            'feed': DOCKER_V2_FEED_URL,
            'upstream_name' : DOCKER_UPSTREAM_NAME,
        }
        body['display_name'] = DOCKER_V2_REPO
        body['id'] = body['display_name']
        repo = client.post(REPOSITORY_PATH, body)
        utils.sync_repo(self.cfg, repo)
